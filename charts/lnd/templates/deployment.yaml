apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "lnd.fullname" . }}
  labels:
    app: {{ template "lnd.name" . }}
    chart: {{ template "lnd.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "lnd.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "lnd.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.configurationFile }}
      initContainers:
        - name: copy-lnd-config
          image: busybox
          command: ['sh', '-c', 'cat /configmap/*.conf > /root/.lnd/lnd.conf']
          volumeMounts:
            - name: configmap
              subPath: lnd.conf
              mountPath: /configmap/
            {{- if .Values.extraConfig }}
            - name: extraConfig
              mountPath: /configmap/
              subPath: {{ .Values.extraConfig.secretKey}}
            {{- end }}
            - name: config
              mountPath: /root/.lnd/
      {{- end }}
      terminationGracePeriodSeconds: 60
      containers:
        - name: {{ template "lnd.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command:
{{ toYaml .Values.command | indent 12 }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            - name: rpc
              containerPort: {{ .Values.internalServices.rpcPort }}
            - name: rest
              containerPort: {{ .Values.internalServices.restPort }}
            - name: prometheus
              containerPort: {{ .Values.internalServices.prometheusPort }}
            - name: p2p
              containerPort: {{ .Values.externalServices.p2pPort }}
          volumeMounts:
            - name: data
              mountPath: /root/.lnd
              subPath: .lnd
            {{- if .Values.configurationFile }}
            - name: config
              mountPath: /root/.lnd/lnd.conf
              subPath: lnd.conf
            {{- end }}
            {{- if .Values.autoUnlock }}
            - name: secrets
              mountPath: /passwords/wallet_password
              subPath: wallet_password
            {{- end }}
          lifecycle:
            preStop:
              exec:
                # Make sure we safely quit lnd so we don't corrupt
                # anything
                command: ["/bin/lncli", "-n", "{{ .Values.network }}", "stop"]
        {{- if .Values.lit.enable }}
        - name: lit
          image: {{ .Values.lit.image.repository }}:{{ .Values.lit.image.tag }}
          # go to sleep first to give lnd a chance to start
          command: ['/bin/sh']
          args:
            - "-c"
            - "sleep {{ .Values.lit.sleep }} && litd --uipassword={{ .Values.lit.password }} --network={{ .Values.lit.network }} --remote.lnd.macaroonpath={{ .Values.lit.macaroonPath }} --remote.lnd.tlscertpath={{ .Values.lit.tlsCertPath }}"
          ports:
            - name: http
              containerPort: {{ .Values.lit.port }}
          volumeMounts:
            - name: data
              mountPath: /root/
          resources:
            requests:
              cpu: "10m"
        {{- end }}
        {{- if .Values.lndbackup.enable }}
        - name: lndbackup
          image: "{{ .Values.lndbackup.image.repository }}:{{ .Values.lndbackup.image.tag }}"
          command: ['/bin/sh']
          args:
            - "-c"
            - "sleep {{ .Values.lndbackup.sleep }} && /bin/lndbackup"
          env:
            {{- range $key, $value := .Values.lndbackup.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.lndbackup.secrets }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
          volumeMounts:
          - name: data
            mountPath: /root/
        {{- end }}
      volumes:
        {{- if .Values.autoUnlock }}
        - name: secrets
          secret:
            secretName: {{ template "lnd.fullname" . }}
        {{- end }}
        {{- if .Values.configurationFile }}
        - name: config
          emptyDir: {}
        - name: configmap
          configMap:
            name: {{ template "lnd.fullname" . }}
        {{- end }}
        {{- if .Values.extraConfig }}
        - name: extraConfig
          secret:
            secretName: {{ .Values.extraConfig.secretName}}
        {{- end }}
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "lnd.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end -}}
